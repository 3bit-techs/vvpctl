#!/usr/bin/env python
# -*- coding: utf-8 -*-

import requests
import logging
import json
import os
import glob
import time
import subprocess
import sys

from timeit import default_timer as timer
from deepdiff import DeepDiff
from argparse import ArgumentParser
from http.client import HTTPConnection
from re import search
from datetime import datetime

def deploymentHealthCheck(arguments, deploymentConfig):
    '''Performs a health check on the deployment'''

    if arguments.health_check:

        logging.info("Waiting for %d seconds to verify if the deployment will keep a healthy status : dry_run = %s" % (arguments.health_check_time, str(arguments.dry_run)))

        if not arguments.dry_run:
            # sleep
            time.sleep(arguments.health_check_time)

        # grab the latest state
        deployment = findDeployment(arguments, deploymentConfig)

        # find a JobFailing Status
        isFailing =  next((sub for sub in deployment['status']['running']['conditions'] if sub['type'] == 'JobFailing' and sub['status'] == 'True'), None)

        # failed job status reported
        if isFailing != None:
            raise Exception("Health check of deployment %s failed after %d seconds (Failing status found)" % (deploymentConfig['metadata']['name'], arguments.health_check_time))

def listArtifacts(arguments):
    '''List the deployed artifacts on Ververica Platform Artifact Storage'''

    try:

        # list artifacts request
        listArtifactsResult = requests.get("%s/artifacts/v1/namespaces/%s/artifacts:list" % (arguments.server, arguments.namespace), headers={"accept": "application/json", "content-type": "application/json"})

        # error check
        listArtifactsResult.raise_for_status()

        # debug
        logging.debug(listArtifactsResult.text)

        # parse and return
        return listArtifactsResult.json()

    except Exception as e:
        logging.exception("An error occurred trying to list the artifacts on the server: %s" % e)
        raise e

def deleteArtifact(arguments, artifact):
    '''Delete an artifact from artifact storage'''

    try:

        logging.info("Deleting artifact %s from server : dry_run = %s" % (artifact['filename'], str(arguments.dry_run)))

        # dry run
        if not arguments.dry_run:

            # delete
            deleteArtifactResult = requests.delete("%s/artifacts/v1/namespaces/%s/artifacts:delete?filename=%s" % (arguments.server, arguments.namespace, artifact['filename']), headers={"accept": "application/json", "content-type": "application/json"})

            # check error
            deleteArtifactResult.raise_for_status()

    except Exception as e:
        logging.exception("An error occurred trying to list the artifacts on the server: %s" % e)
        raise e

def purgeOldArtifacts(arguments, deploymentConfig):
    '''Purge old artifacts related to the deployment from the storage'''

    # retrieve the artifact list
    artifacts = listArtifacts(arguments)

    # sort by creation time (ascending)
    sortedArtifacts = sorted(artifacts['artifacts'], key=lambda artifact: datetime.strptime(artifact['createTime'], "%Y-%m-%dT%H:%M:%SZ"))

    # purge candidate list
    purgeCandidates = list()

    # iterate
    for artifact in sortedArtifacts:
        # looking for artifacts by deployment name
        if search(deploymentConfig['metadata']['name'], artifact['filename']):
            # add to list
            purgeCandidates.append(artifact)

    # purge
    while len(purgeCandidates) > arguments.keep_artifacts:
        logging.info("Will purge artifact because the number of old artifacts %d is greater than the desired number to keep %d" % (len(purgeCandidates), arguments.keep_artifacts))

        # remove oldest artifact
        deleteArtifact(arguments, purgeCandidates.pop(0))

def findDeploymentTarget(arguments):
    ''' Find the default deployment target on the list of all deployment targets, and if found return it, otherwise create one and return it'''

    try:

        # recovering the deployment target
        getDeploymentTargetsRequest = requests.get(
            "%s/api/v1/namespaces/%s/deployment-targets" % (arguments.server, arguments.namespace), headers={"accept": "application/json", "content-type": "application/json"})

        # error check
        getDeploymentTargetsRequest.raise_for_status()

        # debug
        logging.debug(getDeploymentTargetsRequest.text)

        # search the deployment target on the server list
        deploymentTarget = next((sub for sub in getDeploymentTargetsRequest.json()[
                                'items'] if sub['metadata']['name'] == arguments.deployment_target), None)

        # checking if the default deployment target exists
        if deploymentTarget == None:

            # create and retrieve
            deploymentTarget = createDeploymentTarget(arguments)

        else:

            logging.info("Found deployment target %s with id %s" %
                        (arguments.deployment_target, deploymentTarget['metadata']['id']))

        return deploymentTarget

    except Exception as e:
        logging.exception("An error occurred trying to find the deployment target %s on the server: %s" % (arguments.deployment_target, e))
        raise e

def createDeploymentTarget(arguments):
    '''Create a default deployment target to be used by the app'''

    try:

        # request
        default = {
            "apiVersion": "v1",
            "kind": "DeploymentTarget",
            "metadata": {
                "name": arguments.deployment_target,
                "namespace": arguments.namespace
            },
            "spec": {
                "kubernetes": {
                    "namespace": arguments.deployment_target
                }
            }
        }

        logging.info("Couldn't find the default deployment target %s on the server : Creating (dry_run = %s)" %
                        (arguments.deployment_target, str(arguments.dry_run)))

        # creating
        if not arguments.dry_run:

            result = requests.post(
                "%s/api/v1/namespaces/%s/deployment-targets" % (arguments.server, arguments.namespace), json=default, headers={"accept": "application/json", "content-type": "application/json"})

            # error check
            result.raise_for_status()

            # debug
            logging.debug(result.text)

            return result.json()

    except Exception as e:
        logging.exception("An error occurred trying to create a deployment target on the server: %s" % e)
        raise e

def listDeployments(arguments):
    '''Returns the list of all installed deployments'''

    try:

        # recovering vvp deployments
        getDeploymentsRequest = requests.get("%s/api/v1/namespaces/%s/deployments" % (arguments.server, arguments.namespace),
                                            headers={"accept": "application/json", "content-type": "application/json"})

        # error check
        getDeploymentsRequest.raise_for_status()

        # debug
        logging.debug(getDeploymentsRequest.text)

        # get deployments
        return getDeploymentsRequest.json()

    except Exception as e:
        logging.exception("An error occurred trying to list all deployments from server: %s" % e)
        raise e

def findDeployment(arguments, deploymentConfig):
    '''Find a deployment by name'''

    # retrieve the list of installed deployments
    deploymentsList = listDeployments(arguments)

    # search the deployment on the running deployments
    return next((sub for sub in deploymentsList['items'] if sub['metadata']['name'] == deploymentConfig['metadata']['name']), None)

def readDeploymentConfig(arguments):
    '''Read the deployment config file from disk and parse the JSON'''

    try:

        # open the deployment file
        with open(arguments.file, 'r', encoding='utf-8') as deploymentConfigFile:

            # parse the deployment from the file contents
            return json.load(deploymentConfigFile)

    except Exception as e:
        logging.exception("An error occurred when trying to read the deployment config file: %s" % e)
        raise e

def delete(arguments, deploymentConfig):
    '''Deletes a deployment by name'''

    try:

        # wait for transition (if any)
        waitDeploymentForDesiredState(arguments, deploymentConfig)

        logging.info("Deleting deployment %s : dry_run = %s" % (deploymentConfig['metadata']['name'], str(arguments.dry_run)))

        if not arguments.dry_run:

            # delete
            result = requests.delete("%s/api/v1/namespaces/%s/deployments/%s" % (
                arguments.server, arguments.namespace, deploymentConfig['metadata']['id']), headers={"accept": "application/json", "content-type": "application/json"})

            # error check
            result.raise_for_status()

            logging.info("Successfully deleted deployment %s" % deploymentConfig['metadata']['name'])

    except Exception as e:
        logging.exception("An error occurred trying to delete the deployment %s target from the server: %s" % (deploymentConfig['metadata']['name'], e))
        raise e

def waitDeploymentForDesiredState(arguments, deploymentConfig):
    '''Waits a deployment to transition to its desired state'''

    # dry run doesn't require to wait
    if arguments.dry_run:
        return

    # wait a little bit for the last action to be persisted by the Application Controller
    time.sleep(10)

    # measuring time for timeout
    start = timer()

    # done flag
    done = False

    # wait for transition
    while not done:

        # retrieve the deployment from the server
        deployment = findDeployment(arguments, deploymentConfig)

        # check
        if deployment == None:
            raise Exception("Deployment %s was not found on the server (probably was removed by another user during the cli execution)")

        # elapsed time
        elapsed = timer() - start

        # check for timeout
        if elapsed > arguments.timeout:
            raise Exception("Timeout occured (%d seconds) while waiting for the transition of deployment %s to desired state: %s, current state: %s" % (elapsed, deployment['metadata']['name'], deployment['spec']['state'], deployment['status']['state']))

        # checking if the deployment transition has failed,
        # at this point a manual intervention is necessary - for example cancelling the Deployment
        if deployment['status']['state'] == 'FAILED':

            logging.info("Deployment %s transition FAILED (Desired state: %s, Current state: %s) : Cancelling" % (
                deployment['metadata']['name'], deployment['spec']['state'], deployment['status']['state']))

            # cancel before continue
            cancel(arguments, deployment)

        elif deployment['status']['state'] != deployment['spec']['state']:

            logging.info("Waiting for deployment %s transition (Desired state: %s, Current state: %s)" % (
                deployment['metadata']['name'], deployment['spec']['state'], deployment['status']['state']))

            # wait a little bit
            time.sleep(10)

        else:

            # transition finished
            done = True

def upload(arguments, deploymentConfig):
    '''Uploads a file to the Ververica Artifact Storage'''

    try:

        # get the file size
        fileSize = os.stat(arguments.upload).st_size

        # name convention (needed for purge)
        if not search(deploymentConfig['metadata']['name'], arguments.upload):
            raise Exception("The file name to upload %s must be prefixed by the deployment name %s" % (arguments.upload, deploymentConfig['metadata']['name']))

        # sanity check
        if fileSize > 50000000:
            raise Exception("Exceeded maximum file lengh in bytes to upload (%d > 50000000)" % fileSize)

        logging.info("Trying to upload artifact: %s (%d bytes) : dry_run = %s" % (arguments.upload, fileSize, str(arguments.dry_run)))

        # dry run
        if not arguments.dry_run:

            with open(arguments.upload, 'rb') as file:

                # post multipart upload
                result = requests.post("%s/artifacts/v1/namespaces/default/artifacts:upload" % arguments.server, files={'file': file})

                # error checking
                result.raise_for_status()

                logging.info("Successfully uploaded artifact:\n%s" % result.text)

                # return the artifact info
                return result.json()

    except Exception as e:
        logging.exception("An error occurred when trying to upload the file to the artifact storage: %s" % e)
        raise e

def output(arguments, deployment):
    '''Output a deployment to disk'''

    try:
        if arguments.output != None:
            # dump content to disk
            with open(arguments.output, 'w', encoding='utf-8') as outfile:
                json.dump(deployment, outfile, indent=4, ensure_ascii=False)

    except Exception as e:
        logging.exception("An error occurred when trying to output the deployment to the disk: %s" % e)
        raise e

def update(arguments, deploymentConfig, deployment):
    '''Update a deployment'''

    try:
        # wait for transition (if any)
        waitDeploymentForDesiredState(arguments, deployment)

        logging.info("Looking for changes on deployment %s (Desired state: %s, Current state: %s)" % (
                    deployment['metadata']['name'], deployment['spec']['state'], deployment['status']['state']))

        # paths to exclude (transitory)
        exclude_paths = {"root['status']", "root['metadata']['id']", "root['metadata']['createdAt']", "root['metadata']['modifiedAt']", "root['metadata']['resourceVersion']", "root['metadata']['annotations']['com.dataartisans.appmanager.controller.deployment.transitioning']", "root['metadata']['annotations']['com.dataartisans.appmanager.controller.deployment.spec.version']", "root['metadata']['annotations']['com.dataartisans.appmanager.controller.deployment.transitioning.since']"}

        # if the cli manages the upload, ignores the jar uri field
        if arguments.upload != None:
            exclude_paths.add("root['spec']['template']['spec']['artifact']['jarUri']")

        # difference between current and server
        diff = DeepDiff(deployment, deploymentConfig, exclude_paths=exclude_paths)

        # changes found
        if bool(diff):
            logging.info("Deployment %s has the following changes %s : Updating (dry_run = %s)" % (deployment['metadata']['name'], str(diff.to_dict()), str(arguments.dry_run)))

            if not arguments.dry_run:
                # patch
                result = requests.patch("%s/api/v1/namespaces/%s/deployments/%s" % (
                    arguments.server, arguments.namespace, deployment['metadata']['id']), headers={"accept": "application/json", "content-type": "application/json"}, json=deploymentConfig)

                # error check
                result.raise_for_status()

                # debug
                logging.debug(result.text)

                # wait for running
                waitDeploymentForDesiredState(arguments, deployment)

                # performs a health check on the deployment
                deploymentHealthCheck(arguments, deployment)

                # output the installed Deployment
                output(arguments, deployment)

                logging.info("Successfully updated deployment %s" % deployment['metadata']['name'])

        else:
            logging.info("Deployment %s has no changes : Ignoring" % deployment['metadata']['name'])

            # output the current Deployment
            output(arguments, deployment)

    except Exception as e:
        logging.exception("An error occurred trying to update the deployment %s target on the server: %s" % (deploymentConfig['metadata']['name'], e))
        raise e

def create(arguments, deploymentConfig):
    '''Create a deployment'''

    try:

        # creating deployment
        logging.info("Creating deployment %s : dry_run = %s" % (deploymentConfig['metadata']['name'], str(arguments.dry_run)))

        # dry run
        if not arguments.dry_run:

            # post
            result = requests.post(
                "%s/api/v1/namespaces/%s/deployments" % (arguments.server, arguments.namespace), headers={"accept": "application/json", "content-type": "application/json"}, json=deploymentConfig)

            # error check
            result.raise_for_status()

            # debug
            logging.debug(result.text)

            # wait for running
            waitDeploymentForDesiredState(arguments, deploymentConfig)

            # performs a health check on the deployment
            deploymentHealthCheck(arguments, deploymentConfig)

            # output the installed Deployment
            output(arguments, deploymentConfig)

            logging.info("Successfully created deployment %s" % deploymentConfig['metadata']['name'])

    except Exception as e:
        logging.exception("An error occurred trying to create the deployment %s target on the server: %s" % (deploymentConfig['metadata']['name'], e))
        raise e

def cancel(arguments, deploymentConfig):
    '''Cancel a deployment'''

    try:

        logging.info("Cancelling deployment %s (Desired state: %s, Current state: %s) : dry_run = %s" % (
                    deploymentConfig['metadata']['name'], deploymentConfig['spec']['state'], deploymentConfig['status']['state'], str(arguments.dry_run)))

        # cancelling
        deploymentConfig['spec']['status'] = 'CANCELLED'

        # dry run
        if not arguments.dry_run:

            # patch
            result = requests.patch("%s/api/v1/namespaces/%s/deployments/%s" % (
                arguments.server, arguments.namespace, deploymentConfig['metadata']['id']), headers={"accept": "application/json", "content-type": "application/json"}, json=deploymentConfig)

            # error check
            result.raise_for_status()

            # wait for cancelled
            waitDeploymentForDesiredState(arguments, deploymentConfig)

            # debug
            logging.debug(result.text)

            logging.info("Successfully cancelled deployment %s" % deploymentConfig['metadata']['name'])

    except Exception as e:
        logging.exception("An error occurred trying to cancel the deployment %s target on the server: %s" % (deploymentConfig['metadata']['name'], e))
        raise e

def deleteCommand(arguments):
    '''Deletes a deployment'''

    try:

        # retrieve the deployment config
        deploymentConfig = readDeploymentConfig(arguments)

        # search the deployment on the running deployments
        deployment = findDeployment(arguments, deploymentConfig)

        # deployment found on the server
        if deployment != None:

            # wait for transition (if any)
            waitDeploymentForDesiredState(arguments, deploymentConfig)

            # cancel
            cancel(arguments, deployment)

            # delete
            delete(arguments, deployment)

        else:
            logging.info("Deployment %s not found on the server : Ignoring" % deploymentConfig['metadata']['name'])

    except Exception as e:
        logging.exception("An error occurred trying to delete the deployment %s: %s" % (deploymentConfig['metadata']['name'], e))
        # error
        sys.exit(1)

def applyCommand(arguments):
    '''Apply the configuration on a deployment'''

    try:
        # retrieve the deployment config
        deploymentConfig = readDeploymentConfig(arguments)

        # retrieve the deployment target
        deploymentTarget = findDeploymentTarget(arguments)

        # setting deployment target id if not specified
        if 'deploymentTargetId' not in deploymentConfig['spec']:
            deploymentConfig['spec']['deploymentTargetId'] = deploymentTarget['metadata']['id']

        # search the deployment on the running deployments
        deployment = findDeployment(arguments, deploymentConfig)

        # uploads a file to artifact storage
        if arguments.upload != None:

            # upload
            artifact = upload(arguments, deploymentConfig)

            # check
            if artifact != None:
                # set the artifact
                deploymentConfig['spec']['template']['spec']['artifact']['jarUri'] = artifact['artifact']['uri']

            # purge old artifacts
            if arguments.purge:
                purgeOldArtifacts(arguments, deploymentConfig)

        # deployment found on the server
        if deployment != None:

            try:

                # update the deployment
                update(arguments, deploymentConfig, deployment)

            except Exception as e:
                # don't try to rollback
                if not arguments.rollback:
                    raise e

                # try to rollback
                else:
                    logging.info("The update of the deployment %s failed on the server, trying to rollback to its previous state" % deploymentConfig['metadata']['name'])

                    # rollback the deployment
                    update(arguments, deployment, deploymentConfig)

                    # fail anyway
                    raise Exception("Deployment %s failed on the server, the rollback was completed" % deploymentConfig['metadata']['name']) from e

        # deployment not found on the server
        else:

            # create the deployment
            create(arguments, deploymentConfig)

    except Exception as e:
        logging.exception("An error occurred trying to update the deployment: %s" % e)
        # error
        sys.exit(1)

if __name__ == "__main__":
    """main

    The application main method.
    """

    # parsing arguments
    parser = ArgumentParser(prog="vvpctl", description="Ververica Platform Cli, used to interact with the Application Manager API")
    parser.add_argument("-f", "--file", help="The deployment file", type=str, required=True)
    parser.add_argument("-s", "--server", help="The ververica platform server address. E.g: http://localhost:8080", type=str, required=True)
    parser.add_argument("-n", "--namespace", help="The ververica platform namespace. Note: This feature is only available in Ververica Platform Stream Edition and above", default="default", type=str)
    parser.add_argument("-t", "--deployment-target", help="The Deployment target, which corresponds to different Kubernetes namespaces in the same Kubernetes cluster. If the deployment target doesn't exists the cli will attempt to create one", default="vvp-jobs", type=str)
    parser.add_argument("-a", "--apply", help="Apply a configuration to a deployment", action="store_true")
    parser.add_argument("-d", "--delete", help="Delete a deployment", action="store_true")
    parser.add_argument("-u", "--upload", help="Must be used in conjunction with apply, uploads a file to Ververica Platform Artifact Storage (maximum of 50MB) and update the deployment with the uploaded file location", type=str)
    parser.add_argument("-r", "--rollback", help="Must be used in conjunction with apply, rollback a deployment to its previous state if the update action failed", action="store_true")
    parser.add_argument("-c", "--health-check", help="Performs a health check on the deployment after the update/create action", action="store_true")
    parser.add_argument("--health-check-time", help="Used in conjunction with health-check, the length of time in seconds to wait before checking the deployment for a Failing Status", type=int, default=300)
    parser.add_argument("-o", "--output", help="Must be used in conjunction with apply or create, output the installed deployment to disk", type=str)
    parser.add_argument("--timeout", help="The length of time in seconds to wait before giving up on waiting", type=int, default=1800)
    parser.add_argument("--dry-run", help="Only simulate actions without submit the request", action="store_true")
    parser.add_argument("--log-level", help="The log level (verbosity), from logging library", type=str, default="INFO")
    parser.add_argument("--purge", help="Used in conjunction with upload, purge old artifacts from artifact storage", action="store_true")
    parser.add_argument("--keep-artifacts", help="Used in conjunction with purge, specify how many artifacts to keep (from oldest to newest)", type=int, default=3)

    arguments = parser.parse_args()

    # logging
    level = logging.INFO

    # level
    if arguments.log_level == "ERROR":
        level = logging.ERROR
    elif arguments.log_level == "CRITICAL":
        level = logging.CRITICAL
    elif arguments.log_level == "WARNING":
        level = logging.WARNING
    elif arguments.log_level == "DEBUG":
        level = logging.DEBUG
        HTTPConnection.debuglevel = 1

    # config
    logging.basicConfig(
        format="%(asctime)s - %(module)s - %(levelname)s - %(message)s",
        level=level,
        datefmt="%m/%d/%Y %I:%M:%S %p",
    )

    if arguments.apply:
        applyCommand(arguments)

    elif arguments.delete:
        deleteCommand(arguments)

    else:
        # print help
        parser.print_help()